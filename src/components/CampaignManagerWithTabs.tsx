import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport {\n  Activity, Target, CheckCircle, Zap, Link, Globe, TrendingUp, BarChart3,\n  ExternalLink, Eye, Crown, UserPlus, Loader2, Rocket\n} from 'lucide-react';\n\ninterface CampaignManagerWithTabsProps {\n  selectedCampaignTab: string;\n  setSelectedCampaignTab: (tab: string) => void;\n  user: any;\n  campaigns: any[];\n  guestCampaignResults: any[];\n  guestLinksGenerated: number;\n  isThrottling: boolean;\n  pendingLinksToPublish: any[];\n  currentThrottleDelay: number;\n  controlPanelData: any;\n  campaignForm: any;\n  setCampaignForm: (form: any) => void;\n  linkTypeConfig: any;\n  deployCampaign: () => void;\n  isLoading: boolean;\n  handleUrlChange: (value: string) => void;\n  generateCampaignName: (url: string, keywords: string) => string;\n  getStatusIcon: (status: string) => JSX.Element;\n  showTrialExhaustedModal: boolean;\n  setShowTrialExhaustedModal: (show: boolean) => void;\n  databaseStatus: any;\n  isPremium: boolean;\n}\n\nexport default function CampaignManagerWithTabs({\n  selectedCampaignTab,\n  setSelectedCampaignTab,\n  user,\n  campaigns,\n  guestCampaignResults,\n  guestLinksGenerated,\n  isThrottling,\n  pendingLinksToPublish,\n  currentThrottleDelay,\n  controlPanelData,\n  campaignForm,\n  setCampaignForm,\n  linkTypeConfig,\n  deployCampaign,\n  isLoading,\n  handleUrlChange,\n  generateCampaignName,\n  getStatusIcon,\n  showTrialExhaustedModal,\n  setShowTrialExhaustedModal,\n  databaseStatus,\n  isPremium\n}: CampaignManagerWithTabsProps) {\n  return (\n    <Tabs value={selectedCampaignTab} onValueChange={setSelectedCampaignTab} className=\"w-full\">\n      <TabsList className=\"grid w-full grid-cols-2\">\n        <TabsTrigger value=\"create\">Create Campaign</TabsTrigger>\n        <TabsTrigger value=\"live-results\" className=\"relative\">\n          Live Results\n          {((user && campaigns.filter(c => c.status === 'active').length > 0) ||\n            (!user && guestCampaignResults.length > 0)) && (\n            <div className=\"absolute -top-1 -right-1 h-3 w-3 bg-green-500 rounded-full animate-pulse\"></div>\n          )}\n        </TabsTrigger>\n      </TabsList>\n\n      <TabsContent value=\"create\" className=\"space-y-6\">\n        {/* Campaign Creation Form */}\n        <Card>\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"flex items-center justify-center gap-2\">\n              <Target className=\"h-5 w-5\" />\n              Create Targeted Campaign\n            </CardTitle>\n            <CardDescription>\n              Deploy a focused campaign for a specific link building strategy{!user ? ' - something special awaits!' : ''}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 gap-4 max-w-2xl mx-auto\">\n              <div>\n                <Label htmlFor=\"linkType\">Link Building Strategy</Label>\n                <Select value={campaignForm.linkType} onValueChange={(value) => setCampaignForm(prev => ({ ...prev, linkType: value }))}>\n                  <SelectTrigger className=\"h-12\">\n                    <SelectValue placeholder=\"Select strategy\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Object.entries(linkTypeConfig).map(([key, config]: [string, any]) => (\n                      <SelectItem key={key} value={key}>\n                        <div className=\"flex items-center gap-2\">\n                          <config.icon className=\"h-4 w-4\" />\n                          {config.title}\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"targetUrl\">Target URL *</Label>\n                <Input\n                  id=\"targetUrl\"\n                  value={campaignForm.targetUrl}\n                  onChange={(e) => handleUrlChange(e.target.value)}\n                  placeholder=\"yourwebsite.com (will auto-format to https://)\"\n                  className=\"h-12\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"keywords\">Target Keywords (comma-separated) *</Label>\n                <Input\n                  id=\"keywords\"\n                  value={campaignForm.keywords}\n                  onChange={(e) => setCampaignForm(prev => ({ ...prev, keywords: e.target.value }))}\n                  placeholder=\"enterprise software, business automation, AI solutions\"\n                  className=\"h-12\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"anchorTexts\">Anchor Text Variations</Label>\n                <Textarea\n                  id=\"anchorTexts\"\n                  value={campaignForm.anchorTexts}\n                  onChange={(e) => setCampaignForm(prev => ({ ...prev, anchorTexts: e.target.value }))}\n                  placeholder=\"click here, learn more, enterprise solution, your brand name\"\n                  rows={3}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"dailyLimit\">Daily Link Target</Label>\n                <Input\n                  id=\"dailyLimit\"\n                  type=\"number\"\n                  value={campaignForm.dailyLimit}\n                  onChange={(e) => setCampaignForm(prev => ({ ...prev, dailyLimit: parseInt(e.target.value) || 25 }))}\n                  placeholder=\"25\"\n                  className=\"h-12\"\n                />\n              </div>\n\n              {campaignForm.targetUrl && campaignForm.keywords && (\n                <div className=\"p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                  <div className=\"text-sm text-blue-700\">\n                    <strong>Campaign:</strong> {generateCampaignName(campaignForm.targetUrl, campaignForm.keywords)}\n                  </div>\n                  <div className=\"text-xs text-blue-600 mt-1\">\n                    Strategy: {linkTypeConfig[campaignForm.linkType as keyof typeof linkTypeConfig]?.title}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Campaign Action Buttons */}\n            <div className=\"space-y-4\">\n              {!user && guestLinksGenerated < 20 && (\n                <div className=\"space-y-3\">\n                  <div className=\"max-w-2xl mx-auto\">\n                    <Button\n                      onClick={deployCampaign}\n                      className=\"w-full h-12 px-8 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700\"\n                      disabled={isLoading}\n                    >\n                      {isLoading ? (\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      ) : (\n                        <Zap className=\"h-4 w-4 mr-2\" />\n                      )}\n                      Deploy Campaign\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {!user && guestLinksGenerated >= 20 && (\n                <div className=\"space-y-3\">\n                  <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-4 border-2 border-purple-200\">\n                    <div className=\"text-center\">\n                      <CheckCircle className=\"h-12 w-12 text-green-600 mx-auto mb-3\" />\n                      <h3 className=\"text-lg font-bold text-gray-900 mb-2\">\n                        ðŸŽ‰ Trial Complete! Amazing Results:\n                      </h3>\n                      <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                        <div className=\"bg-white rounded-lg p-3\">\n                          <div className=\"text-2xl font-bold text-green-600\">{guestLinksGenerated}</div>\n                          <div className=\"text-sm text-gray-600\">Backlinks Created</div>\n                        </div>\n                        <div className=\"bg-white rounded-lg p-3\">\n                          <div className=\"text-2xl font-bold text-blue-600\">{guestCampaignResults.length}</div>\n                          <div className=\"text-sm text-gray-600\">Campaigns Run</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                    <Button\n                      onClick={() => setShowTrialExhaustedModal(true)}\n                      className=\"h-12 px-8 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\"\n                    >\n                      <Crown className=\"h-4 w-4 mr-2\" />\n                      Continue with Premium\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => window.location.href = '/login'}\n                      className=\"h-12 px-6\"\n                    >\n                      <UserPlus className=\"h-4 w-4 mr-2\" />\n                      Sign In Free\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {user && databaseStatus && databaseStatus.isConnected && (\n                <div className=\"space-y-3\">\n                  <div className=\"max-w-2xl mx-auto space-y-3\">\n                    <Button\n                      onClick={deployCampaign}\n                      className=\"w-full h-12 px-8 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n                      disabled={isLoading}\n                    >\n                      {isLoading ? (\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      ) : (\n                        <Rocket className=\"h-4 w-4 mr-2\" />\n                      )}\n                      {isPremium ? \"Deploy Premium Campaign\" : \"Deploy Campaign (20 Links)\"}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </TabsContent>\n\n      <TabsContent value=\"live-results\" className=\"space-y-6\">\n        {/* Live Results Interface */}\n        {((user && campaigns.filter(c => c.status === 'active').length > 0) ||\n          (!user && guestCampaignResults.length > 0)) && (\n          <Card className=\"border-2 border-green-200 bg-gradient-to-r from-green-50 to-blue-50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"relative\">\n                    <Activity className=\"h-5 w-5 text-green-600\" />\n                    <div className=\"absolute -top-1 -right-1 h-3 w-3 bg-green-500 rounded-full animate-pulse\"></div>\n                  </div>\n                  Real-Time Campaign Monitor\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <div className=\"h-2 w-2 bg-green-500 rounded-full animate-pulse\"></div>\n                  <span className=\"text-green-600 font-medium\">LIVE</span>\n                  <Badge variant=\"outline\" className=\"bg-green-100 text-green-700 border-green-300\">\n                    {user ? campaigns.filter(c => c.status === 'active').length : guestCampaignResults.length} Active\n                  </Badge>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Real-time Stats Dashboard */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"bg-white rounded-lg p-3 border border-green-200\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-xs font-medium text-muted-foreground\">Links Published</p>\n                      <p className=\"text-xl font-bold text-green-600\">\n                        {user ? campaigns.reduce((sum, c) => sum + c.linksGenerated, 0) : guestLinksGenerated}\n                      </p>\n                    </div>\n                    <Link className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                </div>\n\n                <div className=\"bg-white rounded-lg p-3 border border-blue-200\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-xs font-medium text-muted-foreground\">Domains Reached</p>\n                      <p className=\"text-xl font-bold text-blue-600\">\n                        {user ? Math.min(campaigns.reduce((sum, c) => sum + c.linksGenerated, 0) * 0.8, 50) :\n                         guestCampaignResults.reduce((acc, campaign) => acc + (campaign.domains?.length || 0), 0)}\n                      </p>\n                    </div>\n                    <Globe className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                </div>\n\n                <div className=\"bg-white rounded-lg p-3 border border-purple-200\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-xs font-medium text-muted-foreground\">Success Rate</p>\n                      <p className=\"text-xl font-bold text-purple-600\">\n                        {user ? Math.round(campaigns.reduce((sum, c) => sum + (c.quality?.successRate || 85), 0) / Math.max(campaigns.length, 1)) : 94}%\n                      </p>\n                    </div>\n                    <TrendingUp className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                </div>\n\n                <div className=\"bg-white rounded-lg p-3 border border-orange-200\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-xs font-medium text-muted-foreground\">\n                        {isThrottling ? 'Publishing Queue' : 'Throughput'}\n                      </p>\n                      <p className=\"text-xl font-bold text-orange-600\">\n                        {isThrottling ? `${pendingLinksToPublish.length} queued` : `${controlPanelData.currentThroughput}/hr`}\n                      </p>\n                      {isThrottling && (\n                        <p className=\"text-xs text-gray-600 mt-1\">\n                          Next: {Math.round(currentThrottleDelay/1000)}s\n                        </p>\n                      )}\n                    </div>\n                    <div className=\"relative\">\n                      <Zap className=\"h-6 w-6 text-orange-600\" />\n                      {isThrottling && (\n                        <div className=\"absolute -top-1 -right-1 h-3 w-3 bg-green-500 rounded-full animate-pulse\"></div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Active Campaigns Real-time List */}\n              <div className=\"bg-white rounded-lg border border-gray-200 overflow-hidden\">\n                <div className=\"bg-gradient-to-r from-gray-50 to-blue-50 px-4 py-2 border-b flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"h-4 w-4 text-blue-600\" />\n                    <span className=\"font-medium text-gray-900\">Active Campaign Status</span>\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    Updated: {controlPanelData.lastUpdate.toLocaleTimeString()}\n                  </div>\n                </div>\n                \n                <div className=\"max-h-80 overflow-y-auto\">\n                  {/* Guest Results */}\n                  {!user && guestCampaignResults.length > 0 && (\n                    <div className=\"p-4 space-y-3\">\n                      {guestCampaignResults.map((campaign, idx) => (\n                        <div key={idx} className=\"border rounded-lg p-3 bg-gradient-to-r from-green-50 to-blue-50\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"h-2 w-2 bg-green-500 rounded-full animate-pulse\"></div>\n                              <span className=\"font-medium text-sm\">{campaign.name}</span>\n                            </div>\n                            <Badge variant=\"outline\" className=\"bg-green-100 text-green-700 border-green-300 text-xs\">\n                              âœ“ {campaign.status}\n                            </Badge>\n                          </div>\n                          <div className=\"grid grid-cols-3 gap-2 text-xs\">\n                            <div className=\"text-center\">\n                              <div className=\"font-bold text-green-600\">{campaign.linksGenerated}</div>\n                              <div className=\"text-gray-600\">Links</div>\n                            </div>\n                            <div className=\"text-center\">\n                              <div className=\"font-bold text-blue-600\">{campaign.domains?.length || 0}</div>\n                              <div className=\"text-gray-600\">Domains</div>\n                            </div>\n                            <div className=\"text-center\">\n                              <div className=\"font-bold text-purple-600\">94%</div>\n                              <div className=\"text-gray-600\">Success</div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  {/* User Campaigns */}\n                  {user && campaigns.filter(c => c.status === 'active' || c.status === 'completed').length > 0 && (\n                    <div className=\"p-4 space-y-3\">\n                      {campaigns.filter(c => c.status === 'active' || c.status === 'completed').map((campaign, idx) => (\n                        <div key={idx} className=\"border rounded-lg p-3 bg-gradient-to-r from-blue-50 to-purple-50\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <div className=\"flex items-center gap-2\">\n                              {getStatusIcon(campaign.status)}\n                              <span className=\"font-medium text-sm\">{campaign.name}</span>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Badge variant=\"outline\" className={`text-xs ${\n                                campaign.status === 'active' ? 'bg-green-100 text-green-700 border-green-300' :\n                                campaign.status === 'completed' ? 'bg-blue-100 text-blue-700 border-blue-300' :\n                                'bg-gray-100 text-gray-700 border-gray-300'\n                              }`}>\n                                {campaign.status}\n                              </Badge>\n                            </div>\n                          </div>\n                          <div className=\"grid grid-cols-4 gap-2 text-xs\">\n                            <div className=\"text-center\">\n                              <div className=\"font-bold text-green-600\">{campaign.linksGenerated}</div>\n                              <div className=\"text-gray-600\">Generated</div>\n                            </div>\n                            <div className=\"text-center\">\n                              <div className=\"font-bold text-blue-600\">{campaign.linksLive}</div>\n                              <div className=\"text-gray-600\">Live</div>\n                            </div>\n                            <div className=\"text-center\">\n                              <div className=\"font-bold text-purple-600\">{Math.round(campaign.progress)}%</div>\n                              <div className=\"text-gray-600\">Progress</div>\n                            </div>\n                            <div className=\"text-center\">\n                              <div className=\"font-bold text-orange-600\">{campaign.quality?.successRate || 85}%</div>\n                              <div className=\"text-gray-600\">Success</div>\n                            </div>\n                          </div>\n                          <div className=\"mt-2\">\n                            <Progress value={campaign.progress} className=\"h-1\" />\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  {/* No active campaigns fallback */}\n                  {((user && campaigns.filter(c => c.status === 'active' || c.status === 'completed').length === 0) &&\n                    (!user && guestCampaignResults.length === 0)) && (\n                    <div className=\"p-8 text-center text-gray-500\">\n                      <Rocket className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                      <p className=\"text-sm\">No campaigns running yet</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* No campaigns message */}\n        {!((user && campaigns.filter(c => c.status === 'active').length > 0) ||\n          (!user && guestCampaignResults.length > 0)) && (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <Activity className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Active Campaigns</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Deploy your first campaign to start building high-quality backlinks automatically.\n              </p>\n              <Button\n                onClick={() => setSelectedCampaignTab('create')}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <Target className=\"h-4 w-4 mr-2\" />\n                Create Campaign\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </TabsContent>\n    </Tabs>\n  );\n}\n