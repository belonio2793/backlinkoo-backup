// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a mock client for development when Supabase project is not available
const createMockSupabaseClient = () => {
  const mockUser = {
    id: 'mock-user-id',
    email: 'test@example.com',
    user_metadata: { display_name: 'Test User' },
    created_at: new Date().toISOString(),
    aud: 'authenticated'
  };

  const mockSession = {
    access_token: 'mock-access-token',
    refresh_token: 'mock-refresh-token',
    user: mockUser
  };

  const mockAuth = {
    getSession: () => Promise.resolve({ data: { session: mockSession }, error: null }),
    getUser: () => Promise.resolve({ data: { user: mockUser }, error: null }),
    onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
    signInWithPassword: () => Promise.resolve({
      data: { user: mockUser, session: mockSession },
      error: null
    }),
    signUp: () => Promise.resolve({
      data: { user: mockUser, session: mockSession },
      error: null
    }),
    signOut: () => Promise.resolve({ error: null }),
    resend: () => Promise.resolve({ error: null }),
    verifyOtp: () => Promise.resolve({
      data: { user: mockUser, session: mockSession },
      error: null
    }),
  };

  const mockFrom = (table: string) => {
    const mockMethods = {
      select: (columns?: string) => mockMethods,
      insert: (data: any) => mockMethods,
      update: (data: any) => mockMethods,
      delete: () => mockMethods,
      upsert: (data: any) => mockMethods,
      eq: (column: string, value: any) => mockMethods,
      order: (column: string, options?: any) => mockMethods,
      limit: (count: number) => mockMethods,
      filter: (column: string, operator: string, value: any) => mockMethods,
      gte: (column: string, value: any) => mockMethods,
      lte: (column: string, value: any) => mockMethods,
      gt: (column: string, value: any) => mockMethods,
      lt: (column: string, value: any) => mockMethods,
      in: (column: string, values: any[]) => mockMethods,
      is: (column: string, value: any) => mockMethods,
      neq: (column: string, value: any) => mockMethods,
      ilike: (column: string, pattern: string) => mockMethods,
      like: (column: string, pattern: string) => mockMethods,
      range: (from: number, to: number) => mockMethods,
      single: () => Promise.resolve({ data: { id: 'mock-id', ...mockUser }, error: null }),
      then: (callback: any) => {
        // Return mock data based on table
        if (table === 'profiles') {
          return callback({ data: { user_id: mockUser.id, email: mockUser.email, role: 'user' }, error: null });
        } else if (table === 'credits') {
          return callback({ data: { user_id: mockUser.id, amount: 10 }, error: null });
        } else if (table === 'campaigns') {
          return callback({ data: [], error: null });
        } else if (table === 'ranking_targets' || table === 'ranking_dashboard') {
          return callback({ data: [], error: null });
        }
        return callback({ data: [], error: null });
      }
    };
    return mockMethods;
  };

  const mockFunctions = {
    invoke: () => Promise.resolve({ data: null, error: { message: 'Mock mode - functions disabled' } }),
  };

  const mockChannel = () => ({
    on: () => mockChannel(),
    subscribe: () => {},
  });

  return {
    auth: mockAuth,
    from: mockFrom,
    functions: mockFunctions,
    channel: mockChannel,
    removeChannel: () => {},
    rpc: () => Promise.resolve({ data: null, error: { message: 'Mock mode - RPC disabled' } }),
  };
};

// Check if we have valid Supabase credentials
const hasValidCredentials = SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY &&
  SUPABASE_URL.trim() !== "" && SUPABASE_PUBLISHABLE_KEY.trim() !== "" &&
  !SUPABASE_URL.includes('your-project-url') &&
  !SUPABASE_PUBLISHABLE_KEY.includes('your-anon-key') &&
  SUPABASE_URL.startsWith('https://') &&
  SUPABASE_PUBLISHABLE_KEY.length > 20;

// Use mock client if credentials are missing or invalid
export const supabase = hasValidCredentials ?
  createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    }
  }) :
  createMockSupabaseClient() as any;
