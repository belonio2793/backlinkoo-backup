// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get Supabase configuration
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

console.log('üîß Supabase client configuration:', {
  hasUrl: !!SUPABASE_URL,
  hasKey: !!SUPABASE_ANON_KEY,
  url: SUPABASE_URL ? `${SUPABASE_URL.substring(0, 30)}...` : 'missing',
  keyPrefix: SUPABASE_ANON_KEY ? SUPABASE_ANON_KEY.substring(0, 10) + '...' : 'missing'
});

// Validate credentials
if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  throw new Error('Missing Supabase environment variables. Please set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY');
}

if (!SUPABASE_URL.startsWith('https://') || !SUPABASE_URL.includes('.supabase.co')) {
  throw new Error('Invalid Supabase URL format');
}

if (!SUPABASE_ANON_KEY.startsWith('eyJ') || SUPABASE_ANON_KEY.length < 100) {
  throw new Error('Invalid Supabase API key format');
}

// Create clean Supabase client without custom fetch to avoid stream conflicts
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storageKey: 'supabase.auth.token',
  },
  global: {
    headers: {
      'X-Client-Info': 'backlink-infinity@1.0.0',
    },
    // Use default fetch - no custom wrapper to avoid stream conflicts
  },
});

// Test connection in development
if (import.meta.env.DEV) {
  setTimeout(async () => {
    try {
      console.log('üîç Testing Supabase connection...');
      const { data, error } = await supabase
        .from('domains')
        .select('id')
        .limit(1);

      if (error) {
        console.warn('‚ö†Ô∏è Database connection test failed:', error.message);
      } else {
        console.log('‚úÖ Supabase connection test successful');
      }
    } catch (testError: any) {
      console.warn('‚ö†Ô∏è Supabase connection test error:', testError.message);
    }
  }, 1000);
}

console.log('‚úÖ Clean Supabase client initialized');
