// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://dfhanacsmsvvkpunurnp.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRmaGFuYWNzbXN2dmtwdW51cm5wIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI5NTY2NDcsImV4cCI6MjA2ODUzMjY0N30.MZcB4P_TAOOTktXSG7bNK5BsIMAf1bKXVgT87Zqa5RY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a mock client for development when Supabase project is not available
const createMockSupabaseClient = () => {
  const mockAuth = {
    getSession: () => Promise.resolve({ data: { session: null }, error: null }),
    getUser: () => Promise.resolve({ data: { user: null }, error: null }),
    onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
    signInWithPassword: () => Promise.resolve({ data: { user: null, session: null }, error: { message: 'Mock mode - authentication disabled' } }),
    signUp: () => Promise.resolve({ data: { user: null, session: null }, error: { message: 'Mock mode - authentication disabled' } }),
    signOut: () => Promise.resolve({ error: null }),
    resend: () => Promise.resolve({ error: { message: 'Mock mode - resend disabled' } }),
    verifyOtp: () => Promise.resolve({ data: { user: null, session: null }, error: { message: 'Mock mode - OTP verification disabled' } }),
  };

  const mockFrom = () => ({
    select: () => ({ data: [], error: null }),
    insert: () => ({ data: null, error: null }),
    update: () => ({ data: null, error: null }),
    delete: () => ({ data: null, error: null }),
    upsert: () => ({ data: null, error: null }),
  });

  const mockFunctions = {
    invoke: () => Promise.resolve({ data: null, error: { message: 'Mock mode - functions disabled' } }),
  };

  const mockChannel = () => ({
    on: () => mockChannel(),
    subscribe: () => {},
  });

  return {
    auth: mockAuth,
    from: mockFrom,
    functions: mockFunctions,
    channel: mockChannel,
    removeChannel: () => {},
    rpc: () => Promise.resolve({ data: null, error: { message: 'Mock mode - RPC disabled' } }),
  };
};

// Check if we're in development and if the Supabase URL is accessible
const isDevelopment = import.meta.env.DEV;

export const supabase = isDevelopment
  ? createMockSupabaseClient()
  : createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
      }
    });
