const { OpenAI } = require('openai');

/**
 * Working Content Generator - Reliable OpenAI content generation
 * This function generates SEO-optimized content with embedded anchor links
 */
exports.handler = async (event, context) => {
  // CORS headers
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Content-Type': 'application/json',
  };

  // Handle preflight requests
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: '',
    };
  }

  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ 
        success: false, 
        error: 'Method not allowed' 
      }),
    };
  }

  try {
    // Parse request body
    const { keyword, anchorText, targetUrl, userId, campaignId } = JSON.parse(event.body);

    // Validate required parameters
    if (!keyword || !anchorText || !targetUrl) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({
          success: false,
          error: 'Missing required parameters: keyword, anchorText, and targetUrl are required'
        }),
      };
    }

    // Check for OpenAI API key
    if (!process.env.OPENAI_API_KEY) {
      console.error('OPENAI_API_KEY environment variable not set');
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({
          success: false,
          error: 'OpenAI API key not configured. Please contact support.'
        }),
      };
    }

    console.log('ü§ñ Generating content for:', {
      keyword: keyword.substring(0, 30),
      anchorText: anchorText.substring(0, 30),
      targetUrl: targetUrl.substring(0, 50),
      campaignId
    });

    // Initialize OpenAI
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    });

    // Generate title
    const title = generateTitle(keyword);

    // Create content generation prompt
    const prompt = `Write a comprehensive, SEO-optimized article about "${keyword}". 

Requirements:
- 800-1000 words
- Professional, informative tone
- Include practical insights and actionable advice
- Naturally incorporate the anchor text "${anchorText}" in a way that would logically link to the target URL
- Use proper paragraph structure
- Include relevant subheadings
- Ensure the content provides genuine value to readers

The anchor text "${anchorText}" should appear naturally in the content and make sense when linking to a relevant website.

Focus on creating high-quality, engaging content that readers will find valuable.`;

    // Generate content using OpenAI
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: 'You are a professional content writer specializing in SEO-optimized articles. Write engaging, informative content that naturally incorporates anchor text for backlinking. Always aim for the specified word count and maintain high quality throughout.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 2000,
      temperature: 0.7
    });

    const rawContent = completion.choices[0]?.message?.content;
    
    if (!rawContent) {
      throw new Error('No content generated by OpenAI');
    }

    // Format content with proper anchor text linking
    const formattedContent = formatContentWithAnchorLink(rawContent, anchorText, targetUrl);
    
    // Count words
    const wordCount = countWords(formattedContent);

    console.log(`‚úÖ Content generated successfully (${wordCount} words)`);

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        data: {
          title,
          content: formattedContent,
          wordCount,
          keyword,
          anchorText,
          targetUrl,
          generatedAt: new Date().toISOString()
        }
      }),
    };

  } catch (error) {
    console.error('‚ùå Content generation error:', error);
    
    // Handle specific OpenAI errors
    let errorMessage = 'Failed to generate content';
    let statusCode = 500;

    if (error.code === 'insufficient_quota') {
      errorMessage = 'OpenAI quota exceeded. Please contact support.';
      statusCode = 503;
    } else if (error.code === 'invalid_api_key') {
      errorMessage = 'OpenAI API key is invalid. Please contact support.';
      statusCode = 500;
    } else if (error.code === 'rate_limit_exceeded') {
      errorMessage = 'Rate limit exceeded. Please try again in a moment.';
      statusCode = 429;
    } else if (error.message) {
      errorMessage = error.message;
    }

    return {
      statusCode,
      headers,
      body: JSON.stringify({
        success: false,
        error: errorMessage
      }),
    };
  }
};

/**
 * Generate a title based on keyword
 */
function generateTitle(keyword) {
  const titleTemplates = [
    `The Complete Guide to ${keyword}`,
    `Mastering ${keyword}: Expert Tips and Strategies`,
    `${keyword}: Everything You Need to Know`,
    `Professional ${keyword} Techniques That Work`,
    `${keyword} Best Practices for Success`,
    `Advanced ${keyword} Strategies and Insights`,
    `${keyword}: A Comprehensive Overview`,
    `Essential ${keyword} Tips for Beginners`
  ];
  
  return titleTemplates[Math.floor(Math.random() * titleTemplates.length)];
}

/**
 * Format content to include proper HTML anchor link
 */
function formatContentWithAnchorLink(content, anchorText, targetUrl) {
  // Create the HTML anchor link
  const anchorLink = `<a href="${targetUrl}" target="_blank" rel="noopener noreferrer">${anchorText}</a>`;
  
  // Find the first occurrence of the anchor text and replace with HTML link
  const formattedContent = content.replace(
    new RegExp(escapeRegExp(anchorText), 'i'),
    anchorLink
  );

  // Convert to basic HTML formatting
  return convertToHtml(formattedContent);
}

/**
 * Convert plain text to basic HTML formatting
 */
function convertToHtml(text) {
  // Split into paragraphs and wrap with <p> tags
  const paragraphs = text.split('\n\n').filter(p => p.trim());
  
  return paragraphs
    .map(paragraph => {
      const trimmed = paragraph.trim();
      
      // Check if it's a heading (starts with #)
      if (trimmed.startsWith('#')) {
        const level = (trimmed.match(/^#+/) || [''])[0].length;
        const headingText = trimmed.replace(/^#+\s*/, '');
        return `<h${Math.min(level + 2, 6)}>${headingText.trim()}</h${Math.min(level + 2, 6)}>`;
      }
      
      // Check for bullet points
      if (trimmed.startsWith('- ') || trimmed.startsWith('* ')) {
        const listText = trimmed.replace(/^[-*]\s*/, '');
        return `<p>‚Ä¢ ${listText}</p>`;
      }
      
      // Regular paragraph
      return `<p>${trimmed}</p>`;
    })
    .join('\n\n');
}

/**
 * Count words in text
 */
function countWords(text) {
  // Remove HTML tags and count words
  const plainText = text.replace(/<[^>]*>/g, '');
  return plainText.trim().split(/\s+/).filter(word => word.length > 0).length;
}

/**
 * Escape special characters for regex
 */
function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
